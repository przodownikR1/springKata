import java.lang.annotation.Target;

apply plugin: "groovy"
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'maven'
apply plugin: 'project-report'
apply plugin: 'pmd'
apply plugin: 'application'
apply plugin: 'build-dashboard'
apply plugin: 'codenarc'
apply from: './properties.gradle'


applicationDefaultJvmArgs = ["-Dfile.encoding=UTF=8"]
libsDirName = './target'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
    maven { url "http://repo.spring.io/libs-release-local/"}
    maven { url "http://repo.spring.io/libs-milestone" }
    maven { url "http://m2.neo4j.org" }
}

sourceSets {
    intTest
    main {
        java { srcDir 'src/main/java' }
        groovy { srcDir 'src/main/groovy' }
        resources { srcDir 'src/main/resources' }
    }
    test {
        java { srcDir 'src/test/java' }
        groovy { srcDir 'src/test/groovy' }
        resources { srcDir 'src/test/resources' }
    }
}

    dependencies {
        compile ("org.codehaus.groovy:groovy:${groovyVersion}")
        compile ("org.springframework:spring-core:${springVersion}")
        compile ("org.springframework:spring-beans:${springVersion}")
        compile ("org.springframework:spring-context:${springVersion}")
        compile ("org.springframework:spring-orm:${springVersion}")
        compile ("org.springframework:spring-tx:${springVersion}")
        compile ("org.springframework:spring-aop:${springVersion}")
           
        compile ("org.springframework:spring-aspects:${springVersion}")
        compile ("org.springframework:spring-webmvc:${springVersion}")
        
        compile ("org.springframework.data:spring-data-neo4j-rest:3.0.0.RELEASE")
       
        compile ("org.springframework.data:spring-data-neo4j:3.0.0.RELEASE")
        compile ("org.springframework.data:spring-data-jpa:${springDataJPAVersion}")
        compile ("org.springframework.hateoas:spring-hateoas:0.12.0.RELEASE")
        
        
        compile ("javax.validation:validation-api:${javaxValidationVersion}")
        compile ("org.hibernate:hibernate-validator:${hibernateValidatorVersion}")
        compile ("org.hibernate:hibernate-core:${hibernateVersion}")
        compile ("org.hibernate:hibernate-entitymanager:${hibernateVersion}")
    
        compile ("com.sun.jersey:jersey-bundle:1.18")
        
        compile("joda-time:joda-time:${jodaTimeVersion}")
        compile("org.codehaus.jackson:jackson-mapper-asl:${jacksonMapperVersion}")
        compile("org.codehaus.jackson:jackson-core-asl:${jacksonMapperVersion}")
        //compiler("joda-time:joda-time-hibernate:1.3")
    
        compile("org.projectlombok:lombok:${lombokVersion}")
        compile("com.google.guava:guava:${guavaVersion}")
    
        compile("com.jolbox:bonecp:${bonecpVersion}")
        compile("com.jolbox:bonecp-spring:${bonecpVersion}")
        compile("com.jolbox:bonecp-provider:${bonecpVersion}")
    
        runtime("org.hsqldb:hsqldb:${hsqldbVersion}")
        compile("org.aspectj:aspectjrt:${aspectJVersion}")
        compile("org.aspectj:aspectjweaver:${aspectJVersion}")
    
        compile("org.slf4j:slf4j-api:$slf4jVersion")
        runtime("ch.qos.logback:logback-classic:$logbackVersion")
        compile("ch.qos.logback:logback-core:$logbackVersion")
        
        
        compile("org.apache.activemq:activemq-core:5.7.0")
        compile("org.apache.activemq:activemq-spring:5.9.1")
        compile("org.apache.xbean:xbean-spring:3.18")
        compile("org.springframework:spring-jms:${springVersion}")
    
        testCompile("org.hamcrest:hamcrest-all:$hamcrestVersion")
        testCompile("org.mockito:mockito-all:$mockitoVersion")
        testCompile("junit:junit:$junitVersion")
        testCompile("org.easytesting:fest-assert:${festAssertVersion}")
        testCompile("com.googlecode.catch-exception:catch-exception:1.2.0")
        testCompile ("org.springframework:spring-test:${springVersion}")
        testCompile ("org.spockframework:spock-core:0.7-groovy-2.0")
       
    }
   
    
    configurations {
        all {
            resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
            exclude group: "commons-logging"
            exclude module: "slf4j-log4j12"
            exclude module: "hibernate-jpa-2.0-api"
        }
    }
    
    jar {
        baseName = 'spring4kata'
        version =  '0.0.1'
    
        exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA'
        manifest {
            attributes 'Implementation-Title': 'springKata',
            'Implementation-Version': version,
            'Built-By': System.getProperty('user.name'),
            'Built-Date': new Date(),
            'Built-JDK': System.getProperty('java.version'),
            'Built-Gradle': gradle.gradleVersion
        }
    }
    
    
    task wrapper(type: Wrapper) { gradleVersion = '10.1' }
    
   
